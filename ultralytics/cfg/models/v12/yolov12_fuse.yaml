# YOLOv12 🚀, AGPL-3.0 license
# YOLOv12 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect
# CFG file for YOLOv12-turbo

# Parameters
nc: 1 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov12n.yaml' will call yolov12.yaml with scale 'n'
  # [depth, width, max_channels]
#  n: [0.50, 0.25, 1024] # summary: 497 layers, 2,553,904 parameters, 2,553,888 gradients, 6.2 GFLOPs
#  s: [0.50, 0.50, 1024] # summary: 497 layers, 9,127,424 parameters, 9,127,408 gradients, 19.7 GFLOPs
  m: [0.50, 1.00, 512] # summary: 533 layers, 19,670,784 parameters, 19,670,768 gradients, 60.4 GFLOPs
#  l: [1.00, 1.00, 512] # summary: 895 layers, 26,506,496 parameters, 26,506,480 gradients, 83.3 GFLOPs
#  x: [1.00, 1.50, 512] # summary: 895 layers, 59,414,176 parameters, 59,414,160 gradients, 185.9 GFLOPs


# YOLO12-turbo backbone
backbone:
  # image1 高分二号影像
  # [from, repeats, module, args]
  - [-1, 1, Conv,  [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv,  [128, 3, 2, 1, 2]] # 1-P2/4
  - [-1, 2, C3k2,  [256, False, 0.25]]
  - [-1, 1, Conv,  [256, 3, 2, 1, 4]] # 3-P3/8
  - [-1, 2, C3k2,  [512, False, 0.25]]
  - [-1, 1, Conv,  [512, 3, 2]] # 5-P4/16
  - [-1, 4, A2C2f, [512, True, 4]]
  - [-1, 1, Conv,  [1024, 3, 2]] # 7-P5/32
  - [-1, 4, A2C2f, [1024, True, 1]] # 8

  # image2 高分三号影像
  - [ -1, 1, Conv,  [ 64, 3, 2 ] ] # 9-P1/2
  - [ -1, 1, Conv,  [ 128, 3, 2, 1, 2 ] ] # 10-P2/4
  - [ -1, 2, C3k2,  [ 256, False, 0.25 ] ]
  - [ -1, 1, Conv,  [ 256, 3, 2, 1, 4 ] ] # 12-P3/8
  - [ -1, 2, C3k2,  [ 512, False, 0.25 ] ]
  - [ -1, 1, Conv,  [ 512, 3, 2 ] ] # 14-P4/16
  - [ -1, 4, A2C2f, [ 512, True, 4 ] ]
  - [ -1, 1, Conv,  [ 1024, 3, 2 ] ] # 16-P5/32
  - [ -1, 4, A2C2f, [ 1024, True, 1 ] ] # 17

  # ---------------------------------------------------------
  # Fuse：多尺度特征融合（P3/P4/P5）
  # ---------------------------------------------------------
  - [[4, 13], 1, Concat, [1]]            # 18 fuse P3 (两个分支)
  - [-1, 1, A2C2f, [512, True, 1]]       # 19 Fuse_P3
  - [[6, 15], 1, Concat, [1]]            # 20 fuse P4
  - [-1, 1, A2C2f, [512, True, 1]]       # 21 Fuse_P4
  - [[8, 17], 1, Concat, [1]]            # 22 fuse P5
  - [-1, 1, A2C2f, [1024, True, 1]]      # 23 Fuse_P5


# YOLO12-turbo head
head:
  # ---- 上采样融合阶段 ----
  - [ -1, 1, nn.Upsample, [ None, 2, "nearest" ] ]  # 上采样 P5 -> 1/16
  - [ [ -1, 21 ], 1, Concat, [ 1 ] ]                  # 拼接 Fuse_P4
  - [ -1, 2, A2C2f, [ 512, False, -1 ] ]            # 26 → 输出 P4 head

  - [ -1, 1, nn.Upsample, [ None, 2, "nearest" ] ]  # 上采样 P4 -> 1/8
  - [ [ -1, 19 ], 1, Concat, [ 1 ] ]                  # 拼接 Fuse_P3
  - [ -1, 2, A2C2f, [ 256, False, -1 ] ]            # 29 → 输出 P3 head

  # ---- 下采样回传阶段 ----
  - [ -1, 1, Conv, [ 256, 3, 2 ] ]                  # 下采样 P3->P4
  - [ [ -1, 26 ], 1, Concat, [ 1 ] ]                  # 拼接 P4 head
  - [ -1, 2, A2C2f, [ 512, False, -1 ] ]            # 32 → 输出 P4 head refine

  - [ -1, 1, Conv, [ 512, 3, 2 ] ]                  # 下采样 P4->P5
  - [ [ -1, 23 ], 1, Concat, [ 1 ] ]                  # 拼接 P5
  - [ -1, 2, C3k2, [ 1024, True ] ]                 # 35 → 输出 P5 head refine
  # ---- 检测层 ----
  - [ [ 29, 32, 35 ], 1, Detect, [ nc ] ]             # Detect(P3, P4, P5)

#  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#  - [[-1, 6], 1, Concat, [1]] # cat backbone P4
#  - [-1, 2, A2C2f, [512, False, -1]] # 11
#
#  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
#  - [[-1, 4], 1, Concat, [1]] # cat backbone P3
#  - [-1, 2, A2C2f, [256, False, -1]] # 14
#
#  - [-1, 1, Conv, [256, 3, 2]]
#  - [[-1, 11], 1, Concat, [1]] # cat head P4
#  - [-1, 2, A2C2f, [512, False, -1]] # 17
#
#  - [-1, 1, Conv, [512, 3, 2]]
#  - [[-1, 8], 1, Concat, [1]] # cat head P5
#  - [-1, 2, C3k2, [1024, True]] # 20 (P5/32-large)
#
#  - [[14, 17, 20], 1, Detect, [nc]] # Detect(P3, P4, P5)
